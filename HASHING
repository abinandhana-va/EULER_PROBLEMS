#include<stdio.h>

int n;

int linearpro(int arr[], int key, int n);
int quadraticpro(int arr[], int key, int n);
int doublehash(int arr[], int key, int n);

int smallprime(int val);
int prime(int num);

int main(){
    int vn,i;
    printf("Enter the table size :");
    scanf("%d",&n);
    
    int larr[n],qarr[n],dharr[n];
    for(i=0;i<n;i++){
        larr[i]=-1;
        qarr[i]=-1;
        dharr[i]=-1;
    }
    printf("\nNo of values you want to enter ? ");
    scanf("%d",&vn);
    
    int varr[vn];
    printf("Enter the values");
    for(i=0;i<vn;i++){
        printf("\nValue %d :",i+1);
        scanf("%d",&varr[i]);
        int k=varr[i]%n;
        
        //Linear probing array insertion
        if(larr[k]==-1){
            larr[k]=varr[i];
        }
        else{
            printf("\nCollision occured(LP)\n");
            linearpro(larr,varr[i],n);
        }
        
        //Quadratic probing insertion
        if(qarr[k]==-1){
            qarr[k]=varr[i];
        }
        else{
            printf("\nCollision occured(QP)\n");
            quadraticpro(qarr,varr[i],n);
        }
        
        //Double hashing insertion
        if(dharr[k]==-1){
            dharr[k]=varr[i];
        }
        else{
            printf("\nCollision occured(DH)\n");
            doublehash(dharr,varr[i],n);
        }
    }
    printf("\nArray after insertion:\n");
    printf("\nInserted using linear probing!\n");
    for(i=0;i<n;i++){
        printf("%d  ",larr[i]);
    }
    printf("\nArray after insertion:\n");
    printf("\nInserted using Quadratic probing!\n");
    for(i=0;i<n;i++){
        printf("%d  ",qarr[i]);
    }
    printf("\nArray after insertion:\n");
    printf("\nInserted using Double hashing!\n");
    for(i=0;i<n;i++){
        printf("%d  ",dharr[i]);
    }
}

int linearpro(int arr[], int key, int n){
    int ind = key % n, flag = 0, i;
    for(i = 1; i < n; i++){
        int h1 = (ind + i) % n;
        if(arr[h1] == -1){
            arr[h1] = key;
            flag++;
            break;
        }
    }
    if(flag == 0){
        printf("\nTable is full (Linear Probing)!\n");
        return 0;
    }
    return 1;
}


int quadraticpro(int arr[n],int key,int n){
    int ind=key%n,flag=0,i;
    printf("\nIndex:%d",ind);
    for(i=1;i<=n;i++){
        int h1=(ind+(i*i))%n;
        printf("\nh1 : %d",h1);
        if(arr[h1]==-1){
            arr[h1]=key;
            flag++;
            break;
        }
        else{
            continue;
        }
    }
    if(flag==0){
        printf("\nTable is full!");
        return 0;
    }
    return 1;
}

int doublehash(int arr[n],int key,int n){
    int p=smallprime(n);
    printf("\nNearest small prime : %d",p);
    int h1=key%n,flag=0,i;
    int h2=(p-(key%p));
    for(i=0;i<=n;i++){
        int ind=(h1+i*h2)%n;
        if(arr[ind]==-1){
            arr[ind]=key;
            flag++;
            break;
        }
        else{
            continue;
        }
    }
    if(flag==0){
        printf("\nTable is full!");
        return 0;
    }
    return 1;
}

int smallprime(int val){
    int sm = val - 1;
    while (sm >= 2) {
        if (prime(sm)) {
            return sm;
        }
        sm--;
    }
    return 2;
}

int prime(int num){
    if (num <= 1) return 0;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    return 1;
}
